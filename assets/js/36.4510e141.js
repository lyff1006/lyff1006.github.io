(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{642:function(e,t,a){"use strict";a.r(t);var s=a(6),_=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("在请求一个静态文件的时候（图片，css，js）等，这些文件的特点是文件不经常变化，将这些不经常变化的文件存储起来，对客户端来说是一个优化用户浏览体验的方法。那么这个就是客户端缓存的意义了。")]),e._v(" "),a("p",[e._v("Http 缓存机制作为 web 性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系库中的一个基础环节，同时对于有志成为前端架构师的同学来说是必备的知识技能。")]),e._v(" "),a("p",[e._v("但是对于很多前端同学来说，仅仅只是知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。")]),e._v(" "),a("p",[e._v("在此，我会尝试用简单明了的文字，像大家系统的介绍HTTP缓存机制，期望对各位正确的理解前端缓存有所帮助。")]),e._v(" "),a("h2",{attrs:{id:"_1-http缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http缓存"}},[e._v("#")]),e._v(" 1.http缓存")]),e._v(" "),a("h3",{attrs:{id:"_1-1-强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-强制缓存"}},[e._v("#")]),e._v(" 1.1 强制缓存")]),e._v(" "),a("p",[e._v("从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是如何判断缓存数据是否失效呢？")]),e._v(" "),a("p",[e._v("我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。")]),e._v(" "),a("p",[e._v("对于强制缓存来说，响应header中会有两个字段来标明失效规则（Expires/Cache-Control）使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况。")]),e._v(" "),a("p",[a("strong",[e._v("Expires")])]),e._v(" "),a("p",[e._v("Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。")]),e._v(" "),a("p",[e._v("不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。")]),e._v(" "),a("p",[e._v("另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。")]),e._v(" "),a("p",[e._v("所以HTTP 1.1 的版本，使用Cache-Control替代。")]),e._v(" "),a("p",[a("strong",[e._v("Cache-Control")])]),e._v(" "),a("p",[e._v("Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("private:             客户端可以缓存\npublic:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）\nmax-age=xxx:         缓存的内容将在 xxx 秒后失效\nno-cache:            需要使用对比缓存来验证缓存数据（后面介绍）\nno-store:            所有内容都不会缓存，强制缓存，对比缓存都不会触发\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"_1-2-协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-协商缓存"}},[e._v("#")]),e._v(" 1.2 协商缓存")]),e._v(" "),a("p",[e._v("顾名思义，需要进行比较判断是否可以使用缓存。浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。")]),e._v(" "),a("p",[e._v("再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。")]),e._v(" "),a("p",[e._v("对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，一共分为两种标识传递，接下来，我们分开介绍。")]),e._v(" "),a("p",[a("strong",[e._v("Last-Modified / If-Modified-Since")])]),e._v(" "),a("p",[e._v("Last-Modified：服务器在响应请求时，告诉浏览器资源的最后修改时间。")]),e._v(" "),a("p",[e._v("f-Modified-Since：")]),e._v(" "),a("p",[e._v("再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。")]),e._v(" "),a("p",[e._v("服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。")]),e._v(" "),a("p",[e._v("若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。")]),e._v(" "),a("p",[a("strong",[e._v("Etag / If-None-Match（优先级高于Last-Modified / If-Modified-Since）")])]),e._v(" "),a("p",[e._v("第一次客户端访问资源的时候，服务端返回资源内容的同时返回了ETag：1234，告诉客户端：这个文件的标签是1234，我如果修改了我这边的资源的话，这个标签就会不一样了。")]),e._v(" "),a("p",[e._v("第二次客户端访问资源的时候，由于缓存中已经有了Etag为1234的资源，客户端要去服务端查询的是这个资源有木有过期呢？所以带上了If-None-Match: 1234。告诉服务端：如果你那边的资源还是1234标签的资源，你就返回304告诉我，不需要返回资源内容了。如果不是的话，你再返回资源内容给我就行了。服务端就比较下Etag来看是返回304还是200。")]),e._v(" "),a("h3",{attrs:{id:"_1-3-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-区别"}},[e._v("#")]),e._v(" 1.3 区别")]),e._v(" "),a("p",[e._v("强缓存命中的话不会发请求到服务器（比如chrome中的200 from memory cache），协商缓存一定会发请求到服务器，通过资源的请求首部字段验证资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的实体，而是通知客户端可以从缓存中加载这个资源（304 not modified）。")])])}),[],!1,null,null,null);t.default=_.exports}}]);